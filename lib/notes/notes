
...~~~*****************Time Tracker Flutter Course*****************~~~...

***Keyboard shortcuts***
alt + upArrow to increase selection
Shift + Atl + Arrow => Move code up and down a line
option+ CMD + M => extract code to a method / Ctrl + Alt + M for Windows
alt + enter  => Wrap with widget, Does work
CMD + downArrow => view the documentation of a class
Ctl + Click => Windows to open documentation
Ctrl+Alt+L => format code
Ctrl+Alt+M => extract code to method
Window+Shift+S Screen shot shortcut
Windows+V Opens clipboard

Move line or selection up: Shift + Alt + Up Arrow
Move line or selection down: Shift + Alt + Down Arrow

stful for Stateful Widget code completion on empty file
stless for Stateless Widget code completion on empty file

Alt + Enter => Convert to Stateful Widget

git commit --amend => edit the text of the last commit

// ***Flutter Commands***
flutter doctor
flutter create
open -a Simulator
cd project_name -> flutter run

*********************************************Task List*************************************************
ToDo:
Add name field to users in Firebase
Do FocusNode Homework from 18_303

---***&&&***---
Bugs:
Anonymous login is broken
EmailSignInFormType register is not working. Can't create a new account with email.

***&&&***

*********************************************Daily Notes********************************************
Current Section = 395 Section 24: Using Widget tests with StreamBuilder

***11/5/23
You have to rerun

dart run build_runner build
test --platform chrome // For running googleSignInWeb


each time you change the code to generate new mocks. Then tests will pass or fail based on the changes
made to the mock file.

***11/4/23
Didn't add the code from 392 since it breaks the app.

***11/3/23
Had to use Mockito null safety to get tests to pass. @GenerateNiceMocks
https://github.com/dart-lang/mockito/blob/master/NULL_SAFETY_README.md

When running tests, the widgets arent automatically rebuilt when setState() is called.
Must pump() the widget to reset the state

The essence of a Widget test is that we never manipulate the state directly.


***10/31/23
A unit test is a type of software testing that focuses on verifying the correctness of individual,
isolated components or units of code, such as functions, methods, or classes,
in isolation from the rest of the software system.
The basic idea of a unit test is to validate that a specific unit of code
performs as expected and that it produces the correct output for a given input or set of inputs.

Acceptance criteria follows a Given,When,And,Then structure for writing test cases. Transform those
test cases to unit tests?

***10/18/23
CI stands for continuous integration testing
Every time you update your code it goes through a test run

use flutter test command at root of project in terminal to run all tests
can also run specific tests in the test files directly

***10/10/23
364 - account_page.dart/11-12, build()
Since the landing page is an ancestor of the account page, then we don't need to use another StreamBuilder
Can access the User directly, and if the user changes, the landing page will rebuild anyway.


***10/8/23
Cleaned up security issue with exposed _googleClientId. It's still in the git history though.


Local State:
In summary, the relationship between these three components is as follows:
ChangeNotifier is a base class for creating stateful models that notify listeners when their state changes.
ChangeNotifierProvider is used to provide instances of ChangeNotifier (or its subclasses) to the widget tree.
Consumer is used to listen for changes in the provided state and rebuild its child widget when the state changes.
It's typically used within the widget tree where you want to display or interact with the state.


----------------------------------------------------------------------------------------------------
RxDart Subjects are more specific and user friendly versions of StreamControllers
Can access value synchronously?

***10/6/23
If you want a Stream to have more than one listener. Then you need to create a broadcast() Stream

***10/5/23
It turns out the bug was from some kind of corrupted data in Firestore..

***10/4/23

Bug starts on entries_page.dart line 34
And can be traced ack to entries_bloc.dart. The entriesTileModelStream is providing null data.

Lots of ! null assertions that need to be fixed. Track down from the entries package.

Per chat GPT about ? and ! null operators

Here's a key difference:

The ? operator helps you handle potential null values safely by avoiding errors at runtime.
The ! operator essentially tells Dart, "I know this could be null, but I'm sure it won't be."
It's a way to override the null safety checks, but it comes with a risk of runtime errors if you're wrong.
In general, it's recommended to use the ? operator when dealing
with potentially nullable values to maintain null safety and prevent runtime errors.
Use ! only when you are certain that an expression is not null and understand the associated risks.

***10/1/23
home_page line 39
 return WillPopScope(
      onWillPop: () async => !await navigatorKeys[_currentTab].currentState.maybePop()

Used for handling back navigation on Android.
Pops the stack one at a time unntill it exits the app. On the last pop.
The expression returns false on the last pop, the ! reverse it to return true to the onWillPop() method
allowing the last stack the pop off and close the app.

WillPopScope and navigatorKeys are used to control the navigation stack and routes on Android
Has no effect iOS, which doesn't have a back button?...

***9/30/23
By default, Flutter uses the first Navigator encountered by the build context. Basically, means
that whatever navigator it is called from. If you want to display a dialogue as full screen. Use rootnavitor: true


***9/28/23
You can use the Positioned() Widget to manually place the child Widget on the screen, using pixels
for width and height location.

***9/26/23
Don't forget about Flutter Forms. A built in way to validate Form data

Also borrow code and look at the Flutter Gallery app. Bundled with the SDK.

***9/20/23
Review SigIn Methods

***9/12/23
Fixed all the compile errors for the files inserted into the project


***9/3/23
How do you add default values for variables in a constructor?
IE for the EmptyContainer()
No reason to have to type in messages all the time. Need a default case.

***8/10/23
Debug for Chrome is on a local port

Waiting for connection from debug service on Chrome...
This app is linked to the debug service: ws://127.0.0.1:50259/p54U_AgcHUw=/ws
Debug service listening on ws://127.0.0.1:50259/p54U_AgcHUw=/ws

***8/8/23
database.dart in conjunction with firestore_service.dart is a good example of
scalable, decoupled code.

For example, you could easily change the Service layer and have it interact with AWS, and it wouldn't
cause any big problems to the Database layer

Sometimes the FirestoreDatabase class would called a Repository. Such as in
an Android MVVM


***8/6/23
Stream and StreamBuilder make the database and UI 'Reactive'
Automatically updates UI with changes to DB
FireStore is a 'Realtime Database'. UI rebuilds when DB changes.

Common mistake is to convert the Iterable into a List .map() returns an Iterable
List extends Iterable

Can't seem to hit break points with Flutter chrome project?

ListView allows scrolling

Per ChatGPT:
The ?? operator is known as the "null-aware coalescing operator" in Dart.
It provides a concise way to handle nullable values by providing a default value when the original value is null.

***8/3/23
The Firebase exception error in the jobs_page.dart is a wierd one. There's some issue going on between
the Web Version of Flutter and Firebase.

***8/1/23

Always use strongly typed models to interact with the database. Safe code and easier to maintain.

***7/17/23
16: Troubleshoot EmailSignInPage error messages.
    > Found root cause. See line 190 in email_sign_in_form_change_notifier
    > Also need to fix the secondary text for email and password that attempts to show the error
      below the textfields



***7/13/23***
Where is the Listener assigned for the EmailModelSignInClass?

ValueNotifier is better for simple values
Change Notifier is better for complex models
    > Can chose when to notify listeners, and use Provider

State management is all about moving business logic away for the UI
    > Need to do this to create maintainable code

Use BLoCs when the app needs to be reactive to an outside data source
    > IE Streaming a users location.
    > Using FireStore applications

For internal application state, ValueNotifier and ChangeNotifier are
more convenient.

"Everything should be made as simple as possible, but not simpler"
 -AB

User Provider (package) + StateManagement techniques

***7/5/23***
As long as the appearance and positioning of Widgets on screen, then Flutter does not need to
render the whole parent Widget when build() is called during some kind of StreamBuilder callback.

Always draw out and diagram Widget trees for your app!

***7/4/23***
Decouple the business logic from the UI Widget.
Accomplishing this with BloCs and Models.

***6/22/23***

State management supports your code base as it grows
All state management techniques have trade offs
All apps are different, and may need different techniques

BLoC = Business Logic Component
Business Logic - defines how we manipulate the data in our application. Code that is not UI specific.
BLoC moves the BL into a separate class


**6/21/23**
Use SizedBox() to set the dimensions of the child Widget
How do you use Padding() in Flutter?

Whats going on with this CustomRaisedButton()? How to make the buttons look disabled?

TextEditingController and FocusNodes must be disposed. Call dispose()

**6/13/23**
Provider is a wrapper class around InheritedWidget that makes it easy to provide objects
> Provider is a generic type, and you must specify with <Class> what it's providing
This is called Scoped Access (InheritedWidget/Provider), which is different from Dependency Injection (via constructor)
Provider allows for state management techniques

**6/11/23**
Build Context is always accessible inside a Stateful Widgets
Context needs to be passed around inside Stateless Widgets

**6/6/23**
Look up how to use named parameters inside methods.

Navigator.of(context).pop(false) or .pop(true) allows a Dialog to return a bool value
true, false, or null. Keep that in mind.

Commit format like so. -m "210, 211 Platform aware dialogs - Ch.12"

Android you can dismiss a dialog by clicking anywhere outside it (can customize this), iOS you cannot

**6/1/23**
Introduced SingleChildScrollView and Scrollable widgets for managing small screen sizes.

Generally speaking, only rebuild the page when needed to increase performance.

**5/31/23**
Best practice to disable signIn forms while an auth request is in progress

**5/30/23**

**5/27/23**
Can you mixin more than one class? Can password and email validation be performed on the Firebase side?

**5/21/23**
Use TextEditingController to manage text inside TextField Widgets

Project support email in firebase can be changed.


*************************************** General Notes ********************************************
A Widget is an object that describes part of the user interface
    > Everything visible on the screen is a Widget
    > Everything... Besides services really

Command + click goes to the superclass/documentation for the Flutter class

UI's are always defined decoratively

All UI's can be described with a WidgetTree diagram (See 5.73)

Stateless Widgets are given constant configuration, they are all initialized
with immutable attributes on build. UI will always be rendered in the same way.

Stateful Widget can be given configuration on build, but can define mutable states
    > Data might vary and change the display of the UI
    > Overrides the createState() method
        > Another State class instance is assigned createState()

When data is changed use setState() to rebuild the UI for Stateful Widgets

Best practice to make packages and folders for specific pages of the app
that contains all widgets and such relevant to that page.

Where you put the , in the dart code determines how its auto formatted

Used SizedBox widget to create space between Widgets inside a Container

Disable Buttons by setting onPressed to null

Extract common_widgets into their own directory for re-usability
    > Use Constructors for customization

Use wrap with widget command for SizedBoxed

Callbacks are used to pass states from children to parent Widgets




